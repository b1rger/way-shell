
#include "./app_switcher_app_widget.h"

#include <adwaita.h>
#include <gio/gdesktopappinfo.h>
#include <gio/gio.h>
#include <gtk4-layer-shell/gtk4-layer-shell.h>

#include "./../services/wayland_service/wayland_service.h"
#include "./app_switcher.h"

enum signals { signals_n };

typedef struct _AppSwitcherAppWidget {
    GObject parent_instance;
    WaylandWLRForeignTopLevel *toplevel;
    AdwWindow *win;
    GtkEventControllerMotion *ctrl;
    GtkBox *container;
    GtkButton *button;
    GtkBox *button_contents;
    GtkImage *icon;
    GtkLabel *id_or_title;
    GtkImage *expand_arrow;
    GtkBox *instances_container;
    GHashTable *instances;
    guintptr last_activated;
    guintptr previous_activated;
} AppSwitcherAppWidget;
static guint app_switcher_app_widget_signals[signals_n] = {0};
G_DEFINE_TYPE(AppSwitcherAppWidget, app_switcher_app_widget, G_TYPE_OBJECT);

// stub out dispose, finalize, class_init and init methods.
static void app_switcher_app_widget_dispose(GObject *object) {
    G_OBJECT_CLASS(app_switcher_app_widget_parent_class)->dispose(object);
}

static void app_switcher_app_widget_finalize(GObject *object) {
    G_OBJECT_CLASS(app_switcher_app_widget_parent_class)->finalize(object);
}

static void app_switcher_app_widget_class_init(
    AppSwitcherAppWidgetClass *klass) {
    GObjectClass *object_class = G_OBJECT_CLASS(klass);
    object_class->dispose = app_switcher_app_widget_dispose;
    object_class->finalize = app_switcher_app_widget_finalize;
}

void app_switcher_app_widget_activate(AppSwitcherAppWidget *self);

static void on_button_clicked(GtkButton *button, AppSwitcherAppWidget *self) {
    g_debug("app_switcher_app_widget:on_button_clicked called");

    AppSwitcher *app_switcher = app_switcher_get_global();
    app_switcher_hide(app_switcher);

    WaylandService *wayland = wayland_service_get_global();
    wayland_wlr_foreign_toplevel_activate(wayland, self->toplevel);
}

static void app_switcher_app_widget_set_layout_instance(
    AppSwitcherAppWidget *self) {
    gtk_image_set_pixel_size(self->icon, 48);
    gtk_label_set_width_chars(self->id_or_title, 12);
    gtk_label_set_max_width_chars(self->id_or_title, 12);
    gtk_widget_set_tooltip_text(GTK_WIDGET(self->button),
                                self->toplevel->title);
    gtk_widget_add_css_class(GTK_WIDGET(self->button), "instance");
}

static void on_button_enter(GtkEventControllerMotion *ctlr, double x, double y,
                            AppSwitcherAppWidget *self) {
    g_debug("app_switcher_app_widget:on_button_enter called");

    AppSwitcher *app_switcher = app_switcher_get_global();
    app_switcher_focus_by_app_widget(app_switcher, self);
}

static void app_switcher_app_widget_init_layout(AppSwitcherAppWidget *self) {
    self->win = ADW_WINDOW(adw_window_new());
    gtk_widget_set_name(GTK_WIDGET(self->win), "app-switcher");
    gtk_window_set_default_size(GTK_WINDOW(self->win), 0, 0);
    gtk_widget_set_visible(GTK_WIDGET(self->win), false);

    // configure layershell, no anchors will place window in center.
    gtk_layer_init_for_window(GTK_WINDOW(self->win));
    gtk_layer_set_layer((GTK_WINDOW(self->win)), GTK_LAYER_SHELL_LAYER_TOP);
    gtk_layer_set_anchor((GTK_WINDOW(self->win)), GTK_LAYER_SHELL_EDGE_TOP,
                         true);
    gtk_layer_set_margin((GTK_WINDOW(self->win)), GTK_LAYER_SHELL_EDGE_TOP,
                         660);

    self->container = GTK_BOX(gtk_box_new(GTK_ORIENTATION_VERTICAL, 0));
    // stash this here for easier access in AppSwitcher
    g_object_set_data(G_OBJECT(self->container), "app-widget", self);
    gtk_widget_add_css_class(GTK_WIDGET(self->container),
                             "app-switcher-app-widget");

    self->button = GTK_BUTTON(gtk_button_new());
    g_signal_connect(self->button, "clicked", G_CALLBACK(on_button_clicked),
                     self);
    gtk_widget_add_css_class(GTK_WIDGET(self->button),
                             "app-switcher-app-widget-button");

    self->button_contents = GTK_BOX(gtk_box_new(GTK_ORIENTATION_VERTICAL, 0));
    gtk_widget_set_halign(GTK_WIDGET(self->button_contents), GTK_ALIGN_CENTER);
    gtk_widget_set_valign(GTK_WIDGET(self->button_contents), GTK_ALIGN_CENTER);

    self->icon =
        GTK_IMAGE(gtk_image_new_from_icon_name("application-x-executable"));
    gtk_image_set_pixel_size(self->icon, 64);

    self->expand_arrow =
        GTK_IMAGE(gtk_image_new_from_icon_name("pan-down-symbolic"));
    gtk_widget_add_css_class(GTK_WIDGET(self->expand_arrow),
                             "app-switcher-app-widget-expand-arrow");
    gtk_image_set_pixel_size(self->expand_arrow, 12);
    gtk_widget_set_visible(GTK_WIDGET(self->expand_arrow), false);

    self->id_or_title = GTK_LABEL(gtk_label_new(""));
    gtk_widget_add_css_class(GTK_WIDGET(self->id_or_title),
                             "app-switcher-app-widget-label");
    gtk_label_set_width_chars(self->id_or_title, 15);
    gtk_label_set_max_width_chars(self->id_or_title, 15);
    gtk_label_set_ellipsize(self->id_or_title, PANGO_ELLIPSIZE_END);
    gtk_label_set_xalign(self->id_or_title, 0.5);

    self->instances_container =
        GTK_BOX(gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0));

    // wire the widget up
    gtk_box_append(self->button_contents, GTK_WIDGET(self->icon));
    gtk_box_append(self->button_contents, GTK_WIDGET(self->id_or_title));

    gtk_button_set_child(self->button, GTK_WIDGET(self->button_contents));
    gtk_box_append(self->container, GTK_WIDGET(self->button));
    gtk_box_append(self->container, GTK_WIDGET(self->expand_arrow));

    adw_window_set_content(self->win, GTK_WIDGET(self->instances_container));
}

static void app_switcher_app_widget_init(AppSwitcherAppWidget *self) {
    self->instances = g_hash_table_new(g_direct_hash, g_direct_equal);
    self->ctrl = GTK_EVENT_CONTROLLER_MOTION(gtk_event_controller_motion_new());
    app_switcher_app_widget_init_layout(self);
}

GAppInfo *search_apps_by_app_id(gchar *app_id) {
    GAppInfo *app_info = NULL;
    GList *apps = g_app_info_get_all();
    GList *l;
    g_debug("app_switcher_app_widget: search_apps_by_app_id: %s", app_id);
    for (l = apps; l != NULL; l = l->next) {
        GAppInfo *info = l->data;
        const gchar *id = g_app_info_get_id(info);
        const gchar *lower_id = g_utf8_strdown(id, -1);
        const gchar *lower_app_id = g_utf8_strdown(app_id, -1);
        if (g_strrstr(lower_id, lower_app_id)) {
            app_info = info;
            break;
        }
    }
    g_list_free(apps);
    return app_info;
}

static void set_icon(AppSwitcherAppWidget *self,
                     WaylandWLRForeignTopLevel *toplevel) {
    GAppInfo *app_info = search_apps_by_app_id(toplevel->app_id);
    GIcon *icon = g_app_info_get_icon(G_APP_INFO(app_info));
    // check and handle GFileIcon, set self->icon to a GtkImage
    if (G_IS_FILE_ICON(icon)) {
        g_debug("G_FILE_ICON");
    }
    // check and handle if GThemedIcon
    else if (G_IS_THEMED_ICON(icon)) {
        GdkDisplay *display = gdk_display_get_default();
        GtkIconTheme *theme = gtk_icon_theme_get_for_display(display);
        GtkIconPaintable *paintable = gtk_icon_theme_lookup_by_gicon(
            theme, icon, 64, 1, GTK_TEXT_DIR_RTL, 0);
        gtk_image_set_from_paintable(self->icon, GDK_PAINTABLE(paintable));
    }
    // check and handle if GLoadableIcon
    else if (G_IS_LOADABLE_ICON(icon)) {
        g_debug("G_LOADABLE_ICON");
    }
}

void app_switcher_app_widget_add_toplevel(AppSwitcherAppWidget *self,
                                          WaylandWLRForeignTopLevel *toplevel) {
    AppSwitcherAppWidget *instance;

    guint len = g_list_length(g_hash_table_get_keys(self->instances));
    if (len == 0) {
        self->toplevel = toplevel;
        self->last_activated = (guintptr)toplevel->toplevel;

        // we only connect the controller on high level instances
        gtk_widget_add_controller(GTK_WIDGET(self->button),
                                  GTK_EVENT_CONTROLLER(self->ctrl));

        g_signal_connect(self->ctrl, "enter", G_CALLBACK(on_button_enter),
                         self);

        set_icon(self, toplevel);
        gtk_label_set_text(self->id_or_title, toplevel->app_id);
    }

    if (len > 1) {
        gtk_widget_set_visible(GTK_WIDGET(self->expand_arrow), true);
    }

    instance = g_hash_table_lookup(self->instances, toplevel->toplevel);

    if (instance) {
        gtk_label_set_text(instance->id_or_title, toplevel->title);
        return;
    }

    // configure new instance
    instance = g_object_new(APP_SWITCHER_APP_WIDGET_TYPE, NULL);
    instance->toplevel = toplevel;
    app_switcher_app_widget_set_layout_instance(instance);
    gtk_label_set_text(instance->id_or_title, toplevel->title);
    set_icon(instance, toplevel);

    gtk_box_append(self->instances_container,
                   app_switcher_app_widget_get_widget(instance));
    g_hash_table_insert(self->instances, toplevel->toplevel, instance);
}

gboolean app_switcher_app_widget_remove_toplevel(
    AppSwitcherAppWidget *self, WaylandWLRForeignTopLevel *toplevel) {
    AppSwitcherAppWidget *instance =
        g_hash_table_lookup(self->instances, toplevel->toplevel);
    if (!instance) {
        return false;
    }
    gtk_widget_unparent(app_switcher_app_widget_get_widget(instance));
    g_hash_table_remove(self->instances, toplevel->toplevel);

    guint len = g_list_length(g_hash_table_get_keys(self->instances));

    if (len == 1) {
        gtk_widget_set_visible(GTK_WIDGET(self->expand_arrow), false);
    }

    if (len == 0) return true;
    return false;
}

GtkWidget *app_switcher_app_widget_get_widget(AppSwitcherAppWidget *self) {
    return GTK_WIDGET(self->container);
}

void app_switcher_app_widget_unset_focus(AppSwitcherAppWidget *self) {
    gtk_widget_set_visible(GTK_WIDGET(self->win), false);
    gtk_widget_remove_css_class(GTK_WIDGET(self->button), "selected");
}

void app_switcher_app_widget_set_focused(AppSwitcherAppWidget *self) {
    app_switcher_app_widget_unset_focus(self);

    guint len = g_list_length(g_hash_table_get_keys(self->instances));

    if (len > 1) {
        gtk_window_present(GTK_WINDOW(self->win));
    }

    gtk_widget_add_css_class(GTK_WIDGET(self->button), "selected");
}

void app_switcher_app_widget_activate(AppSwitcherAppWidget *self) {
    WaylandService *wayland = wayland_service_get_global();
    // activate the last activated instance
    AppSwitcherAppWidget *widget = g_hash_table_lookup(
        self->instances, GUINT_TO_POINTER(self->previous_activated));
    if (!widget) {
        wayland_wlr_foreign_toplevel_activate(wayland, self->toplevel);
        return;
    }
    wayland_wlr_foreign_toplevel_activate(wayland, widget->toplevel);
}

void app_switcher_app_widget_set_last_activated(
    AppSwitcherAppWidget *self, WaylandWLRForeignTopLevel *toplevel) {
    // remove .selected class from all other instances
    AppSwitcherAppWidget *widget;
    GHashTableIter iter;
    gpointer key, value;
    g_hash_table_iter_init(&iter, self->instances);
    while (g_hash_table_iter_next(&iter, &key, &value)) {
        widget = value;
        gtk_widget_remove_css_class(GTK_WIDGET(widget->button), "selected");
    }

    // add selected to newly activated
    widget = g_hash_table_lookup(self->instances, toplevel->toplevel);
    if (widget) {
        gtk_widget_add_css_class(GTK_WIDGET(widget->button), "selected");
    }
    self->previous_activated = self->last_activated;
    self->last_activated = (guintptr)toplevel->toplevel;
}

WaylandWLRForeignTopLevel *app_switcher_app_widget_get_toplevel(
    AppSwitcherAppWidget *self) {
    return self->toplevel;
}
