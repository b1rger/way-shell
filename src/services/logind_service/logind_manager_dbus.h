/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __LOGIND_MANAGER_DBUS_H__
#define __LOGIND_MANAGER_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Manager */

#define DBUS_TYPE_LOGIN1_MANAGER (dbus_login1_manager_get_type ())
#define DBUS_LOGIN1_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_LOGIN1_MANAGER, DbusLogin1Manager))
#define DBUS_IS_LOGIN1_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_LOGIN1_MANAGER))
#define DBUS_LOGIN1_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_LOGIN1_MANAGER, DbusLogin1ManagerIface))

struct _DbusLogin1Manager;
typedef struct _DbusLogin1Manager DbusLogin1Manager;
typedef struct _DbusLogin1ManagerIface DbusLogin1ManagerIface;

struct _DbusLogin1ManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_activate_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id);

  gboolean (*handle_activate_session_on_seat) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id,
    const gchar *arg_seat_id);

  gboolean (*handle_attach_device) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_seat_id,
    const gchar *arg_sysfs_path,
    gboolean arg_interactive);

  gboolean (*handle_can_halt) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_hibernate) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_hybrid_sleep) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_power_off) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot_parameter) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot_to_boot_loader_entry) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot_to_boot_loader_menu) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot_to_firmware_setup) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_suspend) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_suspend_then_hibernate) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_cancel_scheduled_shutdown) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_create_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid,
    guint arg_pid,
    const gchar *arg_service,
    const gchar *arg_type,
    const gchar *arg_class,
    const gchar *arg_desktop,
    const gchar *arg_seat_id,
    guint arg_vtnr,
    const gchar *arg_tty,
    const gchar *arg_display,
    gboolean arg_remote,
    const gchar *arg_remote_user,
    const gchar *arg_remote_host,
    GVariant *arg_properties);

  gboolean (*handle_flush_devices) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_get_seat) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_seat_id);

  gboolean (*handle_get_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id);

  gboolean (*handle_get_session_by_pid) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_pid);

  gboolean (*handle_get_user) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid);

  gboolean (*handle_get_user_by_pid) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_pid);

  gboolean (*handle_halt) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_halt_with_flags) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_flags);

  gboolean (*handle_hibernate) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_hibernate_with_flags) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_flags);

  gboolean (*handle_hybrid_sleep) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_hybrid_sleep_with_flags) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_flags);

  gboolean (*handle_inhibit) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_what,
    const gchar *arg_who,
    const gchar *arg_why,
    const gchar *arg_mode);

  gboolean (*handle_kill_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id,
    const gchar *arg_who,
    gint arg_signal_number);

  gboolean (*handle_kill_user) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid,
    gint arg_signal_number);

  gboolean (*handle_list_inhibitors) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_seats) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_sessions) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_users) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_lock_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id);

  gboolean (*handle_lock_sessions) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_power_off) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_power_off_with_flags) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_flags);

  gboolean (*handle_reboot) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_reboot_with_flags) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_flags);

  gboolean (*handle_release_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id);

  gboolean (*handle_schedule_shutdown) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type,
    guint64 arg_usec);

  gboolean (*handle_set_reboot_parameter) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_parameter);

  gboolean (*handle_set_reboot_to_boot_loader_entry) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_boot_loader_entry);

  gboolean (*handle_set_reboot_to_boot_loader_menu) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_timeout);

  gboolean (*handle_set_reboot_to_firmware_setup) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_enable);

  gboolean (*handle_set_user_linger) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid,
    gboolean arg_enable,
    gboolean arg_interactive);

  gboolean (*handle_set_wall_message) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_wall_message,
    gboolean arg_enable);

  gboolean (*handle_suspend) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_suspend_then_hibernate) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_suspend_then_hibernate_with_flags) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_flags);

  gboolean (*handle_suspend_with_flags) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_flags);

  gboolean (*handle_terminate_seat) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_seat_id);

  gboolean (*handle_terminate_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id);

  gboolean (*handle_terminate_user) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_uid);

  gboolean (*handle_unlock_session) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session_id);

  gboolean (*handle_unlock_sessions) (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_block_inhibited) (DbusLogin1Manager *object);

  const gchar *const * (*get_boot_loader_entries) (DbusLogin1Manager *object);

  const gchar * (*get_delay_inhibited) (DbusLogin1Manager *object);

  gboolean  (*get_docked) (DbusLogin1Manager *object);

  gboolean  (*get_enable_wall_messages) (DbusLogin1Manager *object);

  const gchar * (*get_handle_hibernate_key) (DbusLogin1Manager *object);

  const gchar * (*get_handle_hibernate_key_long_press) (DbusLogin1Manager *object);

  const gchar * (*get_handle_lid_switch) (DbusLogin1Manager *object);

  const gchar * (*get_handle_lid_switch_docked) (DbusLogin1Manager *object);

  const gchar * (*get_handle_lid_switch_external_power) (DbusLogin1Manager *object);

  const gchar * (*get_handle_power_key) (DbusLogin1Manager *object);

  const gchar * (*get_handle_power_key_long_press) (DbusLogin1Manager *object);

  const gchar * (*get_handle_reboot_key) (DbusLogin1Manager *object);

  const gchar * (*get_handle_reboot_key_long_press) (DbusLogin1Manager *object);

  const gchar * (*get_handle_suspend_key) (DbusLogin1Manager *object);

  const gchar * (*get_handle_suspend_key_long_press) (DbusLogin1Manager *object);

  guint64  (*get_holdoff_timeout_usec) (DbusLogin1Manager *object);

  const gchar * (*get_idle_action) (DbusLogin1Manager *object);

  guint64  (*get_idle_action_usec) (DbusLogin1Manager *object);

  gboolean  (*get_idle_hint) (DbusLogin1Manager *object);

  guint64  (*get_idle_since_hint) (DbusLogin1Manager *object);

  guint64  (*get_idle_since_hint_monotonic) (DbusLogin1Manager *object);

  guint64  (*get_inhibit_delay_max_usec) (DbusLogin1Manager *object);

  guint64  (*get_inhibitors_max) (DbusLogin1Manager *object);

  const gchar *const * (*get_kill_exclude_users) (DbusLogin1Manager *object);

  const gchar *const * (*get_kill_only_users) (DbusLogin1Manager *object);

  gboolean  (*get_kill_user_processes) (DbusLogin1Manager *object);

  gboolean  (*get_lid_closed) (DbusLogin1Manager *object);

  guint  (*get_nauto_vts) (DbusLogin1Manager *object);

  guint64  (*get_ncurrent_inhibitors) (DbusLogin1Manager *object);

  guint64  (*get_ncurrent_sessions) (DbusLogin1Manager *object);

  gboolean  (*get_on_external_power) (DbusLogin1Manager *object);

  gboolean  (*get_preparing_for_shutdown) (DbusLogin1Manager *object);

  gboolean  (*get_preparing_for_sleep) (DbusLogin1Manager *object);

  const gchar * (*get_reboot_parameter) (DbusLogin1Manager *object);

  const gchar * (*get_reboot_to_boot_loader_entry) (DbusLogin1Manager *object);

  guint64  (*get_reboot_to_boot_loader_menu) (DbusLogin1Manager *object);

  gboolean  (*get_reboot_to_firmware_setup) (DbusLogin1Manager *object);

  gboolean  (*get_remove_ipc) (DbusLogin1Manager *object);

  guint64  (*get_runtime_directory_inodes_max) (DbusLogin1Manager *object);

  guint64  (*get_runtime_directory_size) (DbusLogin1Manager *object);

  GVariant * (*get_scheduled_shutdown) (DbusLogin1Manager *object);

  guint64  (*get_sessions_max) (DbusLogin1Manager *object);

  guint64  (*get_stop_idle_session_usec) (DbusLogin1Manager *object);

  guint64  (*get_user_stop_delay_usec) (DbusLogin1Manager *object);

  const gchar * (*get_wall_message) (DbusLogin1Manager *object);

  void (*prepare_for_shutdown) (
    DbusLogin1Manager *object,
    gboolean arg_start);

  void (*prepare_for_sleep) (
    DbusLogin1Manager *object,
    gboolean arg_start);

  void (*seat_new) (
    DbusLogin1Manager *object,
    const gchar *arg_seat_id,
    const gchar *arg_object_path);

  void (*seat_removed) (
    DbusLogin1Manager *object,
    const gchar *arg_seat_id,
    const gchar *arg_object_path);

  void (*session_new) (
    DbusLogin1Manager *object,
    const gchar *arg_session_id,
    const gchar *arg_object_path);

  void (*session_removed) (
    DbusLogin1Manager *object,
    const gchar *arg_session_id,
    const gchar *arg_object_path);

  void (*user_new) (
    DbusLogin1Manager *object,
    guint arg_uid,
    const gchar *arg_object_path);

  void (*user_removed) (
    DbusLogin1Manager *object,
    guint arg_uid,
    const gchar *arg_object_path);

};

GType dbus_login1_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_login1_manager_interface_info (void);
guint dbus_login1_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_login1_manager_complete_get_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void dbus_login1_manager_complete_get_session_by_pid (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void dbus_login1_manager_complete_get_user (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void dbus_login1_manager_complete_get_user_by_pid (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void dbus_login1_manager_complete_get_seat (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void dbus_login1_manager_complete_list_sessions (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *sessions);

void dbus_login1_manager_complete_list_users (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *users);

void dbus_login1_manager_complete_list_seats (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *seats);

void dbus_login1_manager_complete_list_inhibitors (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *inhibitors);

void dbus_login1_manager_complete_create_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *session_id,
    const gchar *object_path,
    const gchar *runtime_path,
    GVariant *fifo_fd,
    guint uid,
    const gchar *seat_id,
    guint vtnr,
    gboolean existing);

void dbus_login1_manager_complete_release_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_activate_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_activate_session_on_seat (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_lock_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_unlock_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_lock_sessions (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_unlock_sessions (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_kill_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_kill_user (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_terminate_session (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_terminate_user (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_terminate_seat (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_set_user_linger (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_attach_device (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_flush_devices (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_power_off (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_power_off_with_flags (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_reboot (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_reboot_with_flags (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_halt (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_halt_with_flags (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_suspend (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_suspend_with_flags (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_hibernate (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_hibernate_with_flags (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_hybrid_sleep (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_hybrid_sleep_with_flags (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_suspend_then_hibernate (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_suspend_then_hibernate_with_flags (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_can_power_off (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_can_reboot (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_can_halt (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_can_suspend (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_can_hibernate (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_can_hybrid_sleep (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_can_suspend_then_hibernate (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_schedule_shutdown (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_cancel_scheduled_shutdown (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean cancelled);

void dbus_login1_manager_complete_inhibit (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *pipe_fd);

void dbus_login1_manager_complete_can_reboot_parameter (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_set_reboot_parameter (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_can_reboot_to_firmware_setup (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_set_reboot_to_firmware_setup (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_can_reboot_to_boot_loader_menu (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_set_reboot_to_boot_loader_menu (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_can_reboot_to_boot_loader_entry (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void dbus_login1_manager_complete_set_reboot_to_boot_loader_entry (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);

void dbus_login1_manager_complete_set_wall_message (
    DbusLogin1Manager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void dbus_login1_manager_emit_session_new (
    DbusLogin1Manager *object,
    const gchar *arg_session_id,
    const gchar *arg_object_path);

void dbus_login1_manager_emit_session_removed (
    DbusLogin1Manager *object,
    const gchar *arg_session_id,
    const gchar *arg_object_path);

void dbus_login1_manager_emit_user_new (
    DbusLogin1Manager *object,
    guint arg_uid,
    const gchar *arg_object_path);

void dbus_login1_manager_emit_user_removed (
    DbusLogin1Manager *object,
    guint arg_uid,
    const gchar *arg_object_path);

void dbus_login1_manager_emit_seat_new (
    DbusLogin1Manager *object,
    const gchar *arg_seat_id,
    const gchar *arg_object_path);

void dbus_login1_manager_emit_seat_removed (
    DbusLogin1Manager *object,
    const gchar *arg_seat_id,
    const gchar *arg_object_path);

void dbus_login1_manager_emit_prepare_for_shutdown (
    DbusLogin1Manager *object,
    gboolean arg_start);

void dbus_login1_manager_emit_prepare_for_sleep (
    DbusLogin1Manager *object,
    gboolean arg_start);



/* D-Bus method calls: */
void dbus_login1_manager_call_get_session (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_get_session_finish (
    DbusLogin1Manager *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_get_session_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_get_session_by_pid (
    DbusLogin1Manager *proxy,
    guint arg_pid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_get_session_by_pid_finish (
    DbusLogin1Manager *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_get_session_by_pid_sync (
    DbusLogin1Manager *proxy,
    guint arg_pid,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_get_user (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_get_user_finish (
    DbusLogin1Manager *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_get_user_sync (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_get_user_by_pid (
    DbusLogin1Manager *proxy,
    guint arg_pid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_get_user_by_pid_finish (
    DbusLogin1Manager *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_get_user_by_pid_sync (
    DbusLogin1Manager *proxy,
    guint arg_pid,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_get_seat (
    DbusLogin1Manager *proxy,
    const gchar *arg_seat_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_get_seat_finish (
    DbusLogin1Manager *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_get_seat_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_seat_id,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_list_sessions (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_list_sessions_finish (
    DbusLogin1Manager *proxy,
    GVariant **out_sessions,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_list_sessions_sync (
    DbusLogin1Manager *proxy,
    GVariant **out_sessions,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_list_users (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_list_users_finish (
    DbusLogin1Manager *proxy,
    GVariant **out_users,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_list_users_sync (
    DbusLogin1Manager *proxy,
    GVariant **out_users,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_list_seats (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_list_seats_finish (
    DbusLogin1Manager *proxy,
    GVariant **out_seats,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_list_seats_sync (
    DbusLogin1Manager *proxy,
    GVariant **out_seats,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_list_inhibitors (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_list_inhibitors_finish (
    DbusLogin1Manager *proxy,
    GVariant **out_inhibitors,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_list_inhibitors_sync (
    DbusLogin1Manager *proxy,
    GVariant **out_inhibitors,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_create_session (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    guint arg_pid,
    const gchar *arg_service,
    const gchar *arg_type,
    const gchar *arg_class,
    const gchar *arg_desktop,
    const gchar *arg_seat_id,
    guint arg_vtnr,
    const gchar *arg_tty,
    const gchar *arg_display,
    gboolean arg_remote,
    const gchar *arg_remote_user,
    const gchar *arg_remote_host,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_create_session_finish (
    DbusLogin1Manager *proxy,
    gchar **out_session_id,
    gchar **out_object_path,
    gchar **out_runtime_path,
    GVariant **out_fifo_fd,
    guint *out_uid,
    gchar **out_seat_id,
    guint *out_vtnr,
    gboolean *out_existing,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_create_session_sync (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    guint arg_pid,
    const gchar *arg_service,
    const gchar *arg_type,
    const gchar *arg_class,
    const gchar *arg_desktop,
    const gchar *arg_seat_id,
    guint arg_vtnr,
    const gchar *arg_tty,
    const gchar *arg_display,
    gboolean arg_remote,
    const gchar *arg_remote_user,
    const gchar *arg_remote_host,
    GVariant *arg_properties,
    gchar **out_session_id,
    gchar **out_object_path,
    gchar **out_runtime_path,
    GVariant **out_fifo_fd,
    guint *out_uid,
    gchar **out_seat_id,
    guint *out_vtnr,
    gboolean *out_existing,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_release_session (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_release_session_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_release_session_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_activate_session (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_activate_session_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_activate_session_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_activate_session_on_seat (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    const gchar *arg_seat_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_activate_session_on_seat_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_activate_session_on_seat_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    const gchar *arg_seat_id,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_lock_session (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_lock_session_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_lock_session_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_unlock_session (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_unlock_session_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_unlock_session_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_lock_sessions (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_lock_sessions_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_lock_sessions_sync (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_unlock_sessions (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_unlock_sessions_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_unlock_sessions_sync (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_kill_session (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    const gchar *arg_who,
    gint arg_signal_number,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_kill_session_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_kill_session_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    const gchar *arg_who,
    gint arg_signal_number,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_kill_user (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    gint arg_signal_number,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_kill_user_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_kill_user_sync (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    gint arg_signal_number,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_terminate_session (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_terminate_session_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_terminate_session_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_session_id,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_terminate_user (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_terminate_user_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_terminate_user_sync (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_terminate_seat (
    DbusLogin1Manager *proxy,
    const gchar *arg_seat_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_terminate_seat_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_terminate_seat_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_seat_id,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_set_user_linger (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    gboolean arg_enable,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_set_user_linger_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_set_user_linger_sync (
    DbusLogin1Manager *proxy,
    guint arg_uid,
    gboolean arg_enable,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_attach_device (
    DbusLogin1Manager *proxy,
    const gchar *arg_seat_id,
    const gchar *arg_sysfs_path,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_attach_device_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_attach_device_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_seat_id,
    const gchar *arg_sysfs_path,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_flush_devices (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_flush_devices_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_flush_devices_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_power_off (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_power_off_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_power_off_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_power_off_with_flags (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_power_off_with_flags_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_power_off_with_flags_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_reboot (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_reboot_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_reboot_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_reboot_with_flags (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_reboot_with_flags_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_reboot_with_flags_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_halt (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_halt_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_halt_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_halt_with_flags (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_halt_with_flags_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_halt_with_flags_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_suspend (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_suspend_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_suspend_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_suspend_with_flags (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_suspend_with_flags_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_suspend_with_flags_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_hibernate (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_hibernate_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_hibernate_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_hibernate_with_flags (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_hibernate_with_flags_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_hibernate_with_flags_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_hybrid_sleep (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_hybrid_sleep_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_hybrid_sleep_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_hybrid_sleep_with_flags (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_hybrid_sleep_with_flags_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_hybrid_sleep_with_flags_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_suspend_then_hibernate (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_suspend_then_hibernate_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_suspend_then_hibernate_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_suspend_then_hibernate_with_flags (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_suspend_then_hibernate_with_flags_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_suspend_then_hibernate_with_flags_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_flags,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_power_off (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_power_off_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_power_off_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_reboot (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_reboot_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_reboot_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_halt (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_halt_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_halt_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_suspend (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_suspend_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_suspend_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_hibernate (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_hibernate_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_hibernate_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_hybrid_sleep (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_hybrid_sleep_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_hybrid_sleep_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_suspend_then_hibernate (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_suspend_then_hibernate_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_suspend_then_hibernate_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_schedule_shutdown (
    DbusLogin1Manager *proxy,
    const gchar *arg_type,
    guint64 arg_usec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_schedule_shutdown_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_schedule_shutdown_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_type,
    guint64 arg_usec,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_cancel_scheduled_shutdown (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_cancel_scheduled_shutdown_finish (
    DbusLogin1Manager *proxy,
    gboolean *out_cancelled,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_cancel_scheduled_shutdown_sync (
    DbusLogin1Manager *proxy,
    gboolean *out_cancelled,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_inhibit (
    DbusLogin1Manager *proxy,
    const gchar *arg_what,
    const gchar *arg_who,
    const gchar *arg_why,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_inhibit_finish (
    DbusLogin1Manager *proxy,
    GVariant **out_pipe_fd,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_inhibit_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_what,
    const gchar *arg_who,
    const gchar *arg_why,
    const gchar *arg_mode,
    GVariant **out_pipe_fd,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_reboot_parameter (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_reboot_parameter_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_reboot_parameter_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_set_reboot_parameter (
    DbusLogin1Manager *proxy,
    const gchar *arg_parameter,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_set_reboot_parameter_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_set_reboot_parameter_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_parameter,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_reboot_to_firmware_setup (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_reboot_to_firmware_setup_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_reboot_to_firmware_setup_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_set_reboot_to_firmware_setup (
    DbusLogin1Manager *proxy,
    gboolean arg_enable,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_set_reboot_to_firmware_setup_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_set_reboot_to_firmware_setup_sync (
    DbusLogin1Manager *proxy,
    gboolean arg_enable,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_reboot_to_boot_loader_menu (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_reboot_to_boot_loader_menu_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_reboot_to_boot_loader_menu_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_set_reboot_to_boot_loader_menu (
    DbusLogin1Manager *proxy,
    guint64 arg_timeout,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_set_reboot_to_boot_loader_menu_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_set_reboot_to_boot_loader_menu_sync (
    DbusLogin1Manager *proxy,
    guint64 arg_timeout,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_can_reboot_to_boot_loader_entry (
    DbusLogin1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_can_reboot_to_boot_loader_entry_finish (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_can_reboot_to_boot_loader_entry_sync (
    DbusLogin1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_set_reboot_to_boot_loader_entry (
    DbusLogin1Manager *proxy,
    const gchar *arg_boot_loader_entry,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_set_reboot_to_boot_loader_entry_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_set_reboot_to_boot_loader_entry_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_boot_loader_entry,
    GCancellable *cancellable,
    GError **error);

void dbus_login1_manager_call_set_wall_message (
    DbusLogin1Manager *proxy,
    const gchar *arg_wall_message,
    gboolean arg_enable,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_login1_manager_call_set_wall_message_finish (
    DbusLogin1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_login1_manager_call_set_wall_message_sync (
    DbusLogin1Manager *proxy,
    const gchar *arg_wall_message,
    gboolean arg_enable,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean dbus_login1_manager_get_enable_wall_messages (DbusLogin1Manager *object);
void dbus_login1_manager_set_enable_wall_messages (DbusLogin1Manager *object, gboolean value);

const gchar *dbus_login1_manager_get_wall_message (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_wall_message (DbusLogin1Manager *object);
void dbus_login1_manager_set_wall_message (DbusLogin1Manager *object, const gchar *value);

guint dbus_login1_manager_get_nauto_vts (DbusLogin1Manager *object);
void dbus_login1_manager_set_nauto_vts (DbusLogin1Manager *object, guint value);

const gchar *const *dbus_login1_manager_get_kill_only_users (DbusLogin1Manager *object);
gchar **dbus_login1_manager_dup_kill_only_users (DbusLogin1Manager *object);
void dbus_login1_manager_set_kill_only_users (DbusLogin1Manager *object, const gchar *const *value);

const gchar *const *dbus_login1_manager_get_kill_exclude_users (DbusLogin1Manager *object);
gchar **dbus_login1_manager_dup_kill_exclude_users (DbusLogin1Manager *object);
void dbus_login1_manager_set_kill_exclude_users (DbusLogin1Manager *object, const gchar *const *value);

gboolean dbus_login1_manager_get_kill_user_processes (DbusLogin1Manager *object);
void dbus_login1_manager_set_kill_user_processes (DbusLogin1Manager *object, gboolean value);

const gchar *dbus_login1_manager_get_reboot_parameter (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_reboot_parameter (DbusLogin1Manager *object);
void dbus_login1_manager_set_reboot_parameter (DbusLogin1Manager *object, const gchar *value);

gboolean dbus_login1_manager_get_reboot_to_firmware_setup (DbusLogin1Manager *object);
void dbus_login1_manager_set_reboot_to_firmware_setup (DbusLogin1Manager *object, gboolean value);

guint64 dbus_login1_manager_get_reboot_to_boot_loader_menu (DbusLogin1Manager *object);
void dbus_login1_manager_set_reboot_to_boot_loader_menu (DbusLogin1Manager *object, guint64 value);

const gchar *dbus_login1_manager_get_reboot_to_boot_loader_entry (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_reboot_to_boot_loader_entry (DbusLogin1Manager *object);
void dbus_login1_manager_set_reboot_to_boot_loader_entry (DbusLogin1Manager *object, const gchar *value);

const gchar *const *dbus_login1_manager_get_boot_loader_entries (DbusLogin1Manager *object);
gchar **dbus_login1_manager_dup_boot_loader_entries (DbusLogin1Manager *object);
void dbus_login1_manager_set_boot_loader_entries (DbusLogin1Manager *object, const gchar *const *value);

gboolean dbus_login1_manager_get_idle_hint (DbusLogin1Manager *object);
void dbus_login1_manager_set_idle_hint (DbusLogin1Manager *object, gboolean value);

guint64 dbus_login1_manager_get_idle_since_hint (DbusLogin1Manager *object);
void dbus_login1_manager_set_idle_since_hint (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_idle_since_hint_monotonic (DbusLogin1Manager *object);
void dbus_login1_manager_set_idle_since_hint_monotonic (DbusLogin1Manager *object, guint64 value);

const gchar *dbus_login1_manager_get_block_inhibited (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_block_inhibited (DbusLogin1Manager *object);
void dbus_login1_manager_set_block_inhibited (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_delay_inhibited (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_delay_inhibited (DbusLogin1Manager *object);
void dbus_login1_manager_set_delay_inhibited (DbusLogin1Manager *object, const gchar *value);

guint64 dbus_login1_manager_get_inhibit_delay_max_usec (DbusLogin1Manager *object);
void dbus_login1_manager_set_inhibit_delay_max_usec (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_user_stop_delay_usec (DbusLogin1Manager *object);
void dbus_login1_manager_set_user_stop_delay_usec (DbusLogin1Manager *object, guint64 value);

const gchar *dbus_login1_manager_get_handle_power_key (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_power_key (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_power_key (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_power_key_long_press (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_power_key_long_press (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_power_key_long_press (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_reboot_key (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_reboot_key (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_reboot_key (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_reboot_key_long_press (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_reboot_key_long_press (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_reboot_key_long_press (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_suspend_key (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_suspend_key (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_suspend_key (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_suspend_key_long_press (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_suspend_key_long_press (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_suspend_key_long_press (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_hibernate_key (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_hibernate_key (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_hibernate_key (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_hibernate_key_long_press (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_hibernate_key_long_press (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_hibernate_key_long_press (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_lid_switch (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_lid_switch (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_lid_switch (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_lid_switch_external_power (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_lid_switch_external_power (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_lid_switch_external_power (DbusLogin1Manager *object, const gchar *value);

const gchar *dbus_login1_manager_get_handle_lid_switch_docked (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_handle_lid_switch_docked (DbusLogin1Manager *object);
void dbus_login1_manager_set_handle_lid_switch_docked (DbusLogin1Manager *object, const gchar *value);

guint64 dbus_login1_manager_get_holdoff_timeout_usec (DbusLogin1Manager *object);
void dbus_login1_manager_set_holdoff_timeout_usec (DbusLogin1Manager *object, guint64 value);

const gchar *dbus_login1_manager_get_idle_action (DbusLogin1Manager *object);
gchar *dbus_login1_manager_dup_idle_action (DbusLogin1Manager *object);
void dbus_login1_manager_set_idle_action (DbusLogin1Manager *object, const gchar *value);

guint64 dbus_login1_manager_get_idle_action_usec (DbusLogin1Manager *object);
void dbus_login1_manager_set_idle_action_usec (DbusLogin1Manager *object, guint64 value);

gboolean dbus_login1_manager_get_preparing_for_shutdown (DbusLogin1Manager *object);
void dbus_login1_manager_set_preparing_for_shutdown (DbusLogin1Manager *object, gboolean value);

gboolean dbus_login1_manager_get_preparing_for_sleep (DbusLogin1Manager *object);
void dbus_login1_manager_set_preparing_for_sleep (DbusLogin1Manager *object, gboolean value);

GVariant *dbus_login1_manager_get_scheduled_shutdown (DbusLogin1Manager *object);
GVariant *dbus_login1_manager_dup_scheduled_shutdown (DbusLogin1Manager *object);
void dbus_login1_manager_set_scheduled_shutdown (DbusLogin1Manager *object, GVariant *value);

gboolean dbus_login1_manager_get_docked (DbusLogin1Manager *object);
void dbus_login1_manager_set_docked (DbusLogin1Manager *object, gboolean value);

gboolean dbus_login1_manager_get_lid_closed (DbusLogin1Manager *object);
void dbus_login1_manager_set_lid_closed (DbusLogin1Manager *object, gboolean value);

gboolean dbus_login1_manager_get_on_external_power (DbusLogin1Manager *object);
void dbus_login1_manager_set_on_external_power (DbusLogin1Manager *object, gboolean value);

gboolean dbus_login1_manager_get_remove_ipc (DbusLogin1Manager *object);
void dbus_login1_manager_set_remove_ipc (DbusLogin1Manager *object, gboolean value);

guint64 dbus_login1_manager_get_runtime_directory_size (DbusLogin1Manager *object);
void dbus_login1_manager_set_runtime_directory_size (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_runtime_directory_inodes_max (DbusLogin1Manager *object);
void dbus_login1_manager_set_runtime_directory_inodes_max (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_inhibitors_max (DbusLogin1Manager *object);
void dbus_login1_manager_set_inhibitors_max (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_ncurrent_inhibitors (DbusLogin1Manager *object);
void dbus_login1_manager_set_ncurrent_inhibitors (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_sessions_max (DbusLogin1Manager *object);
void dbus_login1_manager_set_sessions_max (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_ncurrent_sessions (DbusLogin1Manager *object);
void dbus_login1_manager_set_ncurrent_sessions (DbusLogin1Manager *object, guint64 value);

guint64 dbus_login1_manager_get_stop_idle_session_usec (DbusLogin1Manager *object);
void dbus_login1_manager_set_stop_idle_session_usec (DbusLogin1Manager *object, guint64 value);


/* ---- */

#define DBUS_TYPE_LOGIN1_MANAGER_PROXY (dbus_login1_manager_proxy_get_type ())
#define DBUS_LOGIN1_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_LOGIN1_MANAGER_PROXY, DbusLogin1ManagerProxy))
#define DBUS_LOGIN1_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_LOGIN1_MANAGER_PROXY, DbusLogin1ManagerProxyClass))
#define DBUS_LOGIN1_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_LOGIN1_MANAGER_PROXY, DbusLogin1ManagerProxyClass))
#define DBUS_IS_LOGIN1_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_LOGIN1_MANAGER_PROXY))
#define DBUS_IS_LOGIN1_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_LOGIN1_MANAGER_PROXY))

typedef struct _DbusLogin1ManagerProxy DbusLogin1ManagerProxy;
typedef struct _DbusLogin1ManagerProxyClass DbusLogin1ManagerProxyClass;
typedef struct _DbusLogin1ManagerProxyPrivate DbusLogin1ManagerProxyPrivate;

struct _DbusLogin1ManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusLogin1ManagerProxyPrivate *priv;
};

struct _DbusLogin1ManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_login1_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusLogin1ManagerProxy, g_object_unref)
#endif

void dbus_login1_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusLogin1Manager *dbus_login1_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusLogin1Manager *dbus_login1_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_login1_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusLogin1Manager *dbus_login1_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusLogin1Manager *dbus_login1_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_LOGIN1_MANAGER_SKELETON (dbus_login1_manager_skeleton_get_type ())
#define DBUS_LOGIN1_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_LOGIN1_MANAGER_SKELETON, DbusLogin1ManagerSkeleton))
#define DBUS_LOGIN1_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_LOGIN1_MANAGER_SKELETON, DbusLogin1ManagerSkeletonClass))
#define DBUS_LOGIN1_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_LOGIN1_MANAGER_SKELETON, DbusLogin1ManagerSkeletonClass))
#define DBUS_IS_LOGIN1_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_LOGIN1_MANAGER_SKELETON))
#define DBUS_IS_LOGIN1_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_LOGIN1_MANAGER_SKELETON))

typedef struct _DbusLogin1ManagerSkeleton DbusLogin1ManagerSkeleton;
typedef struct _DbusLogin1ManagerSkeletonClass DbusLogin1ManagerSkeletonClass;
typedef struct _DbusLogin1ManagerSkeletonPrivate DbusLogin1ManagerSkeletonPrivate;

struct _DbusLogin1ManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusLogin1ManagerSkeletonPrivate *priv;
};

struct _DbusLogin1ManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_login1_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusLogin1ManagerSkeleton, g_object_unref)
#endif

DbusLogin1Manager *dbus_login1_manager_skeleton_new (void);


G_END_DECLS

#endif /* __LOGIND_MANAGER_DBUS_H__ */
