/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __MEDIA_PLAYER_DBUS_H__
#define __MEDIA_PLAYER_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (dbus_org_freedesktop_dbus_properties_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, DbusOrgFreedesktopDBusProperties))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, DbusOrgFreedesktopDBusPropertiesIface))

struct _DbusOrgFreedesktopDBusProperties;
typedef struct _DbusOrgFreedesktopDBusProperties DbusOrgFreedesktopDBusProperties;
typedef struct _DbusOrgFreedesktopDBusPropertiesIface DbusOrgFreedesktopDBusPropertiesIface;

struct _DbusOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    DbusOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name);

  gboolean (*handle_get_all) (
    DbusOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name);

  gboolean (*handle_set) (
    DbusOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value);

  void (*properties_changed) (
    DbusOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType dbus_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_org_freedesktop_dbus_properties_interface_info (void);
guint dbus_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_org_freedesktop_dbus_properties_complete_get (
    DbusOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void dbus_org_freedesktop_dbus_properties_complete_get_all (
    DbusOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void dbus_org_freedesktop_dbus_properties_complete_set (
    DbusOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void dbus_org_freedesktop_dbus_properties_emit_properties_changed (
    DbusOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void dbus_org_freedesktop_dbus_properties_call_get (
    DbusOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_org_freedesktop_dbus_properties_call_get_finish (
    DbusOrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean dbus_org_freedesktop_dbus_properties_call_get_sync (
    DbusOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void dbus_org_freedesktop_dbus_properties_call_get_all (
    DbusOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_org_freedesktop_dbus_properties_call_get_all_finish (
    DbusOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean dbus_org_freedesktop_dbus_properties_call_get_all_sync (
    DbusOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void dbus_org_freedesktop_dbus_properties_call_set (
    DbusOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_org_freedesktop_dbus_properties_call_set_finish (
    DbusOrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_org_freedesktop_dbus_properties_call_set_sync (
    DbusOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (dbus_org_freedesktop_dbus_properties_proxy_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, DbusOrgFreedesktopDBusPropertiesProxy))
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, DbusOrgFreedesktopDBusPropertiesProxyClass))
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, DbusOrgFreedesktopDBusPropertiesProxyClass))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _DbusOrgFreedesktopDBusPropertiesProxy DbusOrgFreedesktopDBusPropertiesProxy;
typedef struct _DbusOrgFreedesktopDBusPropertiesProxyClass DbusOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _DbusOrgFreedesktopDBusPropertiesProxyPrivate DbusOrgFreedesktopDBusPropertiesProxyPrivate;

struct _DbusOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _DbusOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void dbus_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusOrgFreedesktopDBusProperties *dbus_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusOrgFreedesktopDBusProperties *dbus_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusOrgFreedesktopDBusProperties *dbus_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusOrgFreedesktopDBusProperties *dbus_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (dbus_org_freedesktop_dbus_properties_skeleton_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, DbusOrgFreedesktopDBusPropertiesSkeleton))
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, DbusOrgFreedesktopDBusPropertiesSkeletonClass))
#define DBUS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, DbusOrgFreedesktopDBusPropertiesSkeletonClass))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _DbusOrgFreedesktopDBusPropertiesSkeleton DbusOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _DbusOrgFreedesktopDBusPropertiesSkeletonClass DbusOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _DbusOrgFreedesktopDBusPropertiesSkeletonPrivate DbusOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _DbusOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _DbusOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

DbusOrgFreedesktopDBusProperties *dbus_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (dbus_org_freedesktop_dbus_introspectable_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, DbusOrgFreedesktopDBusIntrospectable))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, DbusOrgFreedesktopDBusIntrospectableIface))

struct _DbusOrgFreedesktopDBusIntrospectable;
typedef struct _DbusOrgFreedesktopDBusIntrospectable DbusOrgFreedesktopDBusIntrospectable;
typedef struct _DbusOrgFreedesktopDBusIntrospectableIface DbusOrgFreedesktopDBusIntrospectableIface;

struct _DbusOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    DbusOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType dbus_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_org_freedesktop_dbus_introspectable_interface_info (void);
guint dbus_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_org_freedesktop_dbus_introspectable_complete_introspect (
    DbusOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *xml_data);



/* D-Bus method calls: */
void dbus_org_freedesktop_dbus_introspectable_call_introspect (
    DbusOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_org_freedesktop_dbus_introspectable_call_introspect_finish (
    DbusOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml_data,
    GAsyncResult *res,
    GError **error);

gboolean dbus_org_freedesktop_dbus_introspectable_call_introspect_sync (
    DbusOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (dbus_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, DbusOrgFreedesktopDBusIntrospectableProxy))
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, DbusOrgFreedesktopDBusIntrospectableProxyClass))
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, DbusOrgFreedesktopDBusIntrospectableProxyClass))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _DbusOrgFreedesktopDBusIntrospectableProxy DbusOrgFreedesktopDBusIntrospectableProxy;
typedef struct _DbusOrgFreedesktopDBusIntrospectableProxyClass DbusOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _DbusOrgFreedesktopDBusIntrospectableProxyPrivate DbusOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _DbusOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _DbusOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void dbus_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusOrgFreedesktopDBusIntrospectable *dbus_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusOrgFreedesktopDBusIntrospectable *dbus_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusOrgFreedesktopDBusIntrospectable *dbus_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusOrgFreedesktopDBusIntrospectable *dbus_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (dbus_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, DbusOrgFreedesktopDBusIntrospectableSkeleton))
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, DbusOrgFreedesktopDBusIntrospectableSkeletonClass))
#define DBUS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, DbusOrgFreedesktopDBusIntrospectableSkeletonClass))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _DbusOrgFreedesktopDBusIntrospectableSkeleton DbusOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _DbusOrgFreedesktopDBusIntrospectableSkeletonClass DbusOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _DbusOrgFreedesktopDBusIntrospectableSkeletonPrivate DbusOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _DbusOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _DbusOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

DbusOrgFreedesktopDBusIntrospectable *dbus_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Peer */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER (dbus_org_freedesktop_dbus_peer_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER, DbusOrgFreedesktopDBusPeer))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER))
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER, DbusOrgFreedesktopDBusPeerIface))

struct _DbusOrgFreedesktopDBusPeer;
typedef struct _DbusOrgFreedesktopDBusPeer DbusOrgFreedesktopDBusPeer;
typedef struct _DbusOrgFreedesktopDBusPeerIface DbusOrgFreedesktopDBusPeerIface;

struct _DbusOrgFreedesktopDBusPeerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_machine_id) (
    DbusOrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_ping) (
    DbusOrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

};

GType dbus_org_freedesktop_dbus_peer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_org_freedesktop_dbus_peer_interface_info (void);
guint dbus_org_freedesktop_dbus_peer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_org_freedesktop_dbus_peer_complete_ping (
    DbusOrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

void dbus_org_freedesktop_dbus_peer_complete_get_machine_id (
    DbusOrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation,
    const gchar *machine_uuid);



/* D-Bus method calls: */
void dbus_org_freedesktop_dbus_peer_call_ping (
    DbusOrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_org_freedesktop_dbus_peer_call_ping_finish (
    DbusOrgFreedesktopDBusPeer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_org_freedesktop_dbus_peer_call_ping_sync (
    DbusOrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_org_freedesktop_dbus_peer_call_get_machine_id (
    DbusOrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_org_freedesktop_dbus_peer_call_get_machine_id_finish (
    DbusOrgFreedesktopDBusPeer *proxy,
    gchar **out_machine_uuid,
    GAsyncResult *res,
    GError **error);

gboolean dbus_org_freedesktop_dbus_peer_call_get_machine_id_sync (
    DbusOrgFreedesktopDBusPeer *proxy,
    gchar **out_machine_uuid,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY (dbus_org_freedesktop_dbus_peer_proxy_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, DbusOrgFreedesktopDBusPeerProxy))
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, DbusOrgFreedesktopDBusPeerProxyClass))
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, DbusOrgFreedesktopDBusPeerProxyClass))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))

typedef struct _DbusOrgFreedesktopDBusPeerProxy DbusOrgFreedesktopDBusPeerProxy;
typedef struct _DbusOrgFreedesktopDBusPeerProxyClass DbusOrgFreedesktopDBusPeerProxyClass;
typedef struct _DbusOrgFreedesktopDBusPeerProxyPrivate DbusOrgFreedesktopDBusPeerProxyPrivate;

struct _DbusOrgFreedesktopDBusPeerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusOrgFreedesktopDBusPeerProxyPrivate *priv;
};

struct _DbusOrgFreedesktopDBusPeerProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_org_freedesktop_dbus_peer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusOrgFreedesktopDBusPeerProxy, g_object_unref)
#endif

void dbus_org_freedesktop_dbus_peer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusOrgFreedesktopDBusPeer *dbus_org_freedesktop_dbus_peer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusOrgFreedesktopDBusPeer *dbus_org_freedesktop_dbus_peer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_org_freedesktop_dbus_peer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusOrgFreedesktopDBusPeer *dbus_org_freedesktop_dbus_peer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusOrgFreedesktopDBusPeer *dbus_org_freedesktop_dbus_peer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON (dbus_org_freedesktop_dbus_peer_skeleton_get_type ())
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, DbusOrgFreedesktopDBusPeerSkeleton))
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, DbusOrgFreedesktopDBusPeerSkeletonClass))
#define DBUS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, DbusOrgFreedesktopDBusPeerSkeletonClass))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))
#define DBUS_IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))

typedef struct _DbusOrgFreedesktopDBusPeerSkeleton DbusOrgFreedesktopDBusPeerSkeleton;
typedef struct _DbusOrgFreedesktopDBusPeerSkeletonClass DbusOrgFreedesktopDBusPeerSkeletonClass;
typedef struct _DbusOrgFreedesktopDBusPeerSkeletonPrivate DbusOrgFreedesktopDBusPeerSkeletonPrivate;

struct _DbusOrgFreedesktopDBusPeerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusOrgFreedesktopDBusPeerSkeletonPrivate *priv;
};

struct _DbusOrgFreedesktopDBusPeerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_org_freedesktop_dbus_peer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusOrgFreedesktopDBusPeerSkeleton, g_object_unref)
#endif

DbusOrgFreedesktopDBusPeer *dbus_org_freedesktop_dbus_peer_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.mpris.MediaPlayer2 */

#define DBUS_TYPE_MEDIA_PLAYER2 (dbus_media_player2_get_type ())
#define DBUS_MEDIA_PLAYER2(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_MEDIA_PLAYER2, DbusMediaPlayer2))
#define DBUS_IS_MEDIA_PLAYER2(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_MEDIA_PLAYER2))
#define DBUS_MEDIA_PLAYER2_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_MEDIA_PLAYER2, DbusMediaPlayer2Iface))

struct _DbusMediaPlayer2;
typedef struct _DbusMediaPlayer2 DbusMediaPlayer2;
typedef struct _DbusMediaPlayer2Iface DbusMediaPlayer2Iface;

struct _DbusMediaPlayer2Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_quit) (
    DbusMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_raise) (
    DbusMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_can_quit) (DbusMediaPlayer2 *object);

  gboolean  (*get_can_raise) (DbusMediaPlayer2 *object);

  gboolean  (*get_can_set_fullscreen) (DbusMediaPlayer2 *object);

  const gchar * (*get_desktop_entry) (DbusMediaPlayer2 *object);

  gboolean  (*get_has_track_list) (DbusMediaPlayer2 *object);

  const gchar * (*get_identity) (DbusMediaPlayer2 *object);

  const gchar *const * (*get_supported_mime_types) (DbusMediaPlayer2 *object);

  const gchar *const * (*get_supported_uri_schemes) (DbusMediaPlayer2 *object);

};

GType dbus_media_player2_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_media_player2_interface_info (void);
guint dbus_media_player2_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_media_player2_complete_raise (
    DbusMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_complete_quit (
    DbusMediaPlayer2 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void dbus_media_player2_call_raise (
    DbusMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_call_raise_finish (
    DbusMediaPlayer2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_call_raise_sync (
    DbusMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_call_quit (
    DbusMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_call_quit_finish (
    DbusMediaPlayer2 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_call_quit_sync (
    DbusMediaPlayer2 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean dbus_media_player2_get_can_quit (DbusMediaPlayer2 *object);
void dbus_media_player2_set_can_quit (DbusMediaPlayer2 *object, gboolean value);

gboolean dbus_media_player2_get_can_set_fullscreen (DbusMediaPlayer2 *object);
void dbus_media_player2_set_can_set_fullscreen (DbusMediaPlayer2 *object, gboolean value);

gboolean dbus_media_player2_get_can_raise (DbusMediaPlayer2 *object);
void dbus_media_player2_set_can_raise (DbusMediaPlayer2 *object, gboolean value);

gboolean dbus_media_player2_get_has_track_list (DbusMediaPlayer2 *object);
void dbus_media_player2_set_has_track_list (DbusMediaPlayer2 *object, gboolean value);

const gchar *dbus_media_player2_get_identity (DbusMediaPlayer2 *object);
gchar *dbus_media_player2_dup_identity (DbusMediaPlayer2 *object);
void dbus_media_player2_set_identity (DbusMediaPlayer2 *object, const gchar *value);

const gchar *dbus_media_player2_get_desktop_entry (DbusMediaPlayer2 *object);
gchar *dbus_media_player2_dup_desktop_entry (DbusMediaPlayer2 *object);
void dbus_media_player2_set_desktop_entry (DbusMediaPlayer2 *object, const gchar *value);

const gchar *const *dbus_media_player2_get_supported_uri_schemes (DbusMediaPlayer2 *object);
gchar **dbus_media_player2_dup_supported_uri_schemes (DbusMediaPlayer2 *object);
void dbus_media_player2_set_supported_uri_schemes (DbusMediaPlayer2 *object, const gchar *const *value);

const gchar *const *dbus_media_player2_get_supported_mime_types (DbusMediaPlayer2 *object);
gchar **dbus_media_player2_dup_supported_mime_types (DbusMediaPlayer2 *object);
void dbus_media_player2_set_supported_mime_types (DbusMediaPlayer2 *object, const gchar *const *value);


/* ---- */

#define DBUS_TYPE_MEDIA_PLAYER2_PROXY (dbus_media_player2_proxy_get_type ())
#define DBUS_MEDIA_PLAYER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_MEDIA_PLAYER2_PROXY, DbusMediaPlayer2Proxy))
#define DBUS_MEDIA_PLAYER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_MEDIA_PLAYER2_PROXY, DbusMediaPlayer2ProxyClass))
#define DBUS_MEDIA_PLAYER2_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_MEDIA_PLAYER2_PROXY, DbusMediaPlayer2ProxyClass))
#define DBUS_IS_MEDIA_PLAYER2_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_MEDIA_PLAYER2_PROXY))
#define DBUS_IS_MEDIA_PLAYER2_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_MEDIA_PLAYER2_PROXY))

typedef struct _DbusMediaPlayer2Proxy DbusMediaPlayer2Proxy;
typedef struct _DbusMediaPlayer2ProxyClass DbusMediaPlayer2ProxyClass;
typedef struct _DbusMediaPlayer2ProxyPrivate DbusMediaPlayer2ProxyPrivate;

struct _DbusMediaPlayer2Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusMediaPlayer2ProxyPrivate *priv;
};

struct _DbusMediaPlayer2ProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_media_player2_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusMediaPlayer2Proxy, g_object_unref)
#endif

void dbus_media_player2_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusMediaPlayer2 *dbus_media_player2_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusMediaPlayer2 *dbus_media_player2_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_media_player2_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusMediaPlayer2 *dbus_media_player2_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusMediaPlayer2 *dbus_media_player2_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_MEDIA_PLAYER2_SKELETON (dbus_media_player2_skeleton_get_type ())
#define DBUS_MEDIA_PLAYER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_MEDIA_PLAYER2_SKELETON, DbusMediaPlayer2Skeleton))
#define DBUS_MEDIA_PLAYER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_MEDIA_PLAYER2_SKELETON, DbusMediaPlayer2SkeletonClass))
#define DBUS_MEDIA_PLAYER2_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_MEDIA_PLAYER2_SKELETON, DbusMediaPlayer2SkeletonClass))
#define DBUS_IS_MEDIA_PLAYER2_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_MEDIA_PLAYER2_SKELETON))
#define DBUS_IS_MEDIA_PLAYER2_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_MEDIA_PLAYER2_SKELETON))

typedef struct _DbusMediaPlayer2Skeleton DbusMediaPlayer2Skeleton;
typedef struct _DbusMediaPlayer2SkeletonClass DbusMediaPlayer2SkeletonClass;
typedef struct _DbusMediaPlayer2SkeletonPrivate DbusMediaPlayer2SkeletonPrivate;

struct _DbusMediaPlayer2Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusMediaPlayer2SkeletonPrivate *priv;
};

struct _DbusMediaPlayer2SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_media_player2_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusMediaPlayer2Skeleton, g_object_unref)
#endif

DbusMediaPlayer2 *dbus_media_player2_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.mpris.MediaPlayer2.Player */

#define DBUS_TYPE_MEDIA_PLAYER2_PLAYER (dbus_media_player2_player_get_type ())
#define DBUS_MEDIA_PLAYER2_PLAYER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER, DbusMediaPlayer2Player))
#define DBUS_IS_MEDIA_PLAYER2_PLAYER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER))
#define DBUS_MEDIA_PLAYER2_PLAYER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER, DbusMediaPlayer2PlayerIface))

struct _DbusMediaPlayer2Player;
typedef struct _DbusMediaPlayer2Player DbusMediaPlayer2Player;
typedef struct _DbusMediaPlayer2PlayerIface DbusMediaPlayer2PlayerIface;

struct _DbusMediaPlayer2PlayerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_next) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_open_uri) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_Uri);

  gboolean (*handle_pause) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play_pause) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_previous) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_seek) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_Offset);

  gboolean (*handle_set_position) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_TrackId,
    gint64 arg_Position);

  gboolean (*handle_stop) (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_can_control) (DbusMediaPlayer2Player *object);

  gboolean  (*get_can_go_next) (DbusMediaPlayer2Player *object);

  gboolean  (*get_can_go_previous) (DbusMediaPlayer2Player *object);

  gboolean  (*get_can_pause) (DbusMediaPlayer2Player *object);

  gboolean  (*get_can_play) (DbusMediaPlayer2Player *object);

  gboolean  (*get_can_seek) (DbusMediaPlayer2Player *object);

  const gchar * (*get_loop_status) (DbusMediaPlayer2Player *object);

  gdouble  (*get_maximum_rate) (DbusMediaPlayer2Player *object);

  GVariant * (*get_metadata) (DbusMediaPlayer2Player *object);

  gdouble  (*get_minimum_rate) (DbusMediaPlayer2Player *object);

  const gchar * (*get_playback_status) (DbusMediaPlayer2Player *object);

  gint64  (*get_position) (DbusMediaPlayer2Player *object);

  gdouble  (*get_rate) (DbusMediaPlayer2Player *object);

  gboolean  (*get_shuffle) (DbusMediaPlayer2Player *object);

  gdouble  (*get_volume) (DbusMediaPlayer2Player *object);

  void (*seeked) (
    DbusMediaPlayer2Player *object,
    gint64 arg_Position);

};

GType dbus_media_player2_player_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_media_player2_player_interface_info (void);
guint dbus_media_player2_player_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_media_player2_player_complete_next (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_previous (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_pause (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_play_pause (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_stop (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_play (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_seek (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_set_position (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);

void dbus_media_player2_player_complete_open_uri (
    DbusMediaPlayer2Player *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void dbus_media_player2_player_emit_seeked (
    DbusMediaPlayer2Player *object,
    gint64 arg_Position);



/* D-Bus method calls: */
void dbus_media_player2_player_call_next (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_next_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_next_sync (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_previous (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_previous_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_previous_sync (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_pause (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_pause_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_pause_sync (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_play_pause (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_play_pause_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_play_pause_sync (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_stop (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_stop_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_stop_sync (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_play (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_play_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_play_sync (
    DbusMediaPlayer2Player *proxy,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_seek (
    DbusMediaPlayer2Player *proxy,
    gint64 arg_Offset,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_seek_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_seek_sync (
    DbusMediaPlayer2Player *proxy,
    gint64 arg_Offset,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_set_position (
    DbusMediaPlayer2Player *proxy,
    const gchar *arg_TrackId,
    gint64 arg_Position,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_set_position_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_set_position_sync (
    DbusMediaPlayer2Player *proxy,
    const gchar *arg_TrackId,
    gint64 arg_Position,
    GCancellable *cancellable,
    GError **error);

void dbus_media_player2_player_call_open_uri (
    DbusMediaPlayer2Player *proxy,
    const gchar *arg_Uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_media_player2_player_call_open_uri_finish (
    DbusMediaPlayer2Player *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_media_player2_player_call_open_uri_sync (
    DbusMediaPlayer2Player *proxy,
    const gchar *arg_Uri,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *dbus_media_player2_player_get_playback_status (DbusMediaPlayer2Player *object);
gchar *dbus_media_player2_player_dup_playback_status (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_playback_status (DbusMediaPlayer2Player *object, const gchar *value);

const gchar *dbus_media_player2_player_get_loop_status (DbusMediaPlayer2Player *object);
gchar *dbus_media_player2_player_dup_loop_status (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_loop_status (DbusMediaPlayer2Player *object, const gchar *value);

gdouble dbus_media_player2_player_get_rate (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_rate (DbusMediaPlayer2Player *object, gdouble value);

gboolean dbus_media_player2_player_get_shuffle (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_shuffle (DbusMediaPlayer2Player *object, gboolean value);

GVariant *dbus_media_player2_player_get_metadata (DbusMediaPlayer2Player *object);
GVariant *dbus_media_player2_player_dup_metadata (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_metadata (DbusMediaPlayer2Player *object, GVariant *value);

gdouble dbus_media_player2_player_get_volume (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_volume (DbusMediaPlayer2Player *object, gdouble value);

gint64 dbus_media_player2_player_get_position (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_position (DbusMediaPlayer2Player *object, gint64 value);

gdouble dbus_media_player2_player_get_minimum_rate (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_minimum_rate (DbusMediaPlayer2Player *object, gdouble value);

gdouble dbus_media_player2_player_get_maximum_rate (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_maximum_rate (DbusMediaPlayer2Player *object, gdouble value);

gboolean dbus_media_player2_player_get_can_go_next (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_can_go_next (DbusMediaPlayer2Player *object, gboolean value);

gboolean dbus_media_player2_player_get_can_go_previous (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_can_go_previous (DbusMediaPlayer2Player *object, gboolean value);

gboolean dbus_media_player2_player_get_can_play (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_can_play (DbusMediaPlayer2Player *object, gboolean value);

gboolean dbus_media_player2_player_get_can_pause (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_can_pause (DbusMediaPlayer2Player *object, gboolean value);

gboolean dbus_media_player2_player_get_can_seek (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_can_seek (DbusMediaPlayer2Player *object, gboolean value);

gboolean dbus_media_player2_player_get_can_control (DbusMediaPlayer2Player *object);
void dbus_media_player2_player_set_can_control (DbusMediaPlayer2Player *object, gboolean value);


/* ---- */

#define DBUS_TYPE_MEDIA_PLAYER2_PLAYER_PROXY (dbus_media_player2_player_proxy_get_type ())
#define DBUS_MEDIA_PLAYER2_PLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_PROXY, DbusMediaPlayer2PlayerProxy))
#define DBUS_MEDIA_PLAYER2_PLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_PROXY, DbusMediaPlayer2PlayerProxyClass))
#define DBUS_MEDIA_PLAYER2_PLAYER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_PROXY, DbusMediaPlayer2PlayerProxyClass))
#define DBUS_IS_MEDIA_PLAYER2_PLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_PROXY))
#define DBUS_IS_MEDIA_PLAYER2_PLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_PROXY))

typedef struct _DbusMediaPlayer2PlayerProxy DbusMediaPlayer2PlayerProxy;
typedef struct _DbusMediaPlayer2PlayerProxyClass DbusMediaPlayer2PlayerProxyClass;
typedef struct _DbusMediaPlayer2PlayerProxyPrivate DbusMediaPlayer2PlayerProxyPrivate;

struct _DbusMediaPlayer2PlayerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusMediaPlayer2PlayerProxyPrivate *priv;
};

struct _DbusMediaPlayer2PlayerProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_media_player2_player_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusMediaPlayer2PlayerProxy, g_object_unref)
#endif

void dbus_media_player2_player_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusMediaPlayer2Player *dbus_media_player2_player_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusMediaPlayer2Player *dbus_media_player2_player_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_media_player2_player_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusMediaPlayer2Player *dbus_media_player2_player_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusMediaPlayer2Player *dbus_media_player2_player_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define DBUS_TYPE_MEDIA_PLAYER2_PLAYER_SKELETON (dbus_media_player2_player_skeleton_get_type ())
#define DBUS_MEDIA_PLAYER2_PLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_SKELETON, DbusMediaPlayer2PlayerSkeleton))
#define DBUS_MEDIA_PLAYER2_PLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_SKELETON, DbusMediaPlayer2PlayerSkeletonClass))
#define DBUS_MEDIA_PLAYER2_PLAYER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_SKELETON, DbusMediaPlayer2PlayerSkeletonClass))
#define DBUS_IS_MEDIA_PLAYER2_PLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_SKELETON))
#define DBUS_IS_MEDIA_PLAYER2_PLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), DBUS_TYPE_MEDIA_PLAYER2_PLAYER_SKELETON))

typedef struct _DbusMediaPlayer2PlayerSkeleton DbusMediaPlayer2PlayerSkeleton;
typedef struct _DbusMediaPlayer2PlayerSkeletonClass DbusMediaPlayer2PlayerSkeletonClass;
typedef struct _DbusMediaPlayer2PlayerSkeletonPrivate DbusMediaPlayer2PlayerSkeletonPrivate;

struct _DbusMediaPlayer2PlayerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusMediaPlayer2PlayerSkeletonPrivate *priv;
};

struct _DbusMediaPlayer2PlayerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_media_player2_player_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusMediaPlayer2PlayerSkeleton, g_object_unref)
#endif

DbusMediaPlayer2Player *dbus_media_player2_player_skeleton_new (void);


G_END_DECLS

#endif /* __MEDIA_PLAYER_DBUS_H__ */
